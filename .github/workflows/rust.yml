name: Build and Test

on:
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust:
          - stable
          - beta
          - nightly
          - "1.76.0"
          - "1.77.0"
          - "1.78.0"
          - "1.79.0"
          - "1.80.0"
          - "1.81.0"
          - "1.82.0"
        package:
          - jetstream
          - jetstream_9p
          - jetstream_client
          - jetstream_distributed
          - jetstream_macros
          - jetstream_server
          - jetstream_ufs
          - jetstream_wireformat
        target:
          - x86_64-unknown-linux-gnu
        testing: [false] # Default to build-only
        include:
          # Add WASM target for wireformat package
          - package: jetstream_wireformat
            target: wasm32-unknown-unknown
            testing: false
          # Enable testing for all packages on rolling releases
          - rust: stable
            testing: true
          - rust: beta
            testing: true
          - rust: nightly
            testing: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
          
      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.8
        
      - name: Build package
        run: cargo build --verbose --package ${{ matrix.package }} --target ${{ matrix.target }}

      - name: Run tests
        if: matrix.testing && matrix.target != 'wasm32-unknown-unknown'
        run: |
          cargo test --verbose --all-features --package ${{ matrix.package }} --target ${{ matrix.target }}
          
          # Run examples only for main package
          if [ "${{ matrix.package }}" = "jetstream" ]; then
            cargo run --example echo
          fi

      - name: Generate coverage report
        if: matrix.rust == 'stable' && matrix.target == 'x86_64-unknown-linux-gnu' && matrix.package == 'jetstream'
        run: |
          cargo install cargo-tarpaulin
          cargo tarpaulin --verbose --all-features --package ${{ matrix.package }} --out Xml

      - name: Upload coverage to Codecov
        if: matrix.rust == 'stable' && matrix.target == 'x86_64-unknown-linux-gnu' && matrix.package == 'jetstream'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}